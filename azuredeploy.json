{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "region": {
      "type": "string",
      "defaultValue": "Germany West Central",
      "allowedValues": [
        "Germany West Central",
        "West Europe",
        "North Europe",
        "East US",
        "West US 2",
        "Central US",
        "East US 2",
        "West US 3",
        "Southeast Asia",
        "East Asia",
        "Japan East",
        "Japan West",
        "Australia East",
        "Australia Southeast",
        "Canada Central",
        "Canada East",
        "UK South",
        "UK West",
        "France Central",
        "France South",
        "Switzerland North",
        "Switzerland West",
        "Norway East",
        "Norway West",
        "Sweden Central",
        "Italy North",
        "Spain Central",
        "Poland Central",
        "South Africa North",
        "UAE North",
        "Brazil South",
        "Central India",
        "South India",
        "West India"
      ]
    },
    "prefix": {
      "type": "string",
      "defaultValue": "pgpatroni"
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser"
    },
    "adminPassword": {
      "type": "secureString",
      "defaultValue": "Azure123!@#"
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v5",
      "allowedValues": [
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_E4s_v5",
        "Standard_E8s_v5"
      ],
      "metadata": {
        "description": "Size of the database VMs"
      }
    },
    "numberOfNodes": {
      "type": "int",
      "defaultValue": 2,
      "allowedValues": [
        2,
        3
      ],
      "metadata": {
        "description": "Number of database nodes (2 or 3)"
      }
    },
    "dataDiskSizeGB": {
      "type": "int",
      "defaultValue": 1024
    },
    "walDiskSizeGB": {
      "type": "int",
      "defaultValue": 512
    },
    "diskSku": {
      "type": "string",
      "defaultValue": "Premium_LRS",
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_LRS",
        "StandardSSD_ZRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Managed disk SKU"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.50.0.0/16"
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.50.1.0/24"
    },
    "lbPrivateIP": {
      "type": "string",
      "defaultValue": "10.50.1.10"
    },
    "postgresPassword": {
      "type": "secureString",
      "defaultValue": "ChangeMe123!"
    },
    "replicatorPassword": {
      "type": "secureString",
      "defaultValue": "ChangeMe123!"
    },
    "enablePublicLB": {
      "type": "bool",
      "defaultValue": false
    },
    "enablePgBouncerTier": {
      "type": "bool",
      "defaultValue": true
    },
    "pgbouncerLbPrivateIP": {
      "type": "string",
      "defaultValue": "10.50.1.11"
    },
    "pgbouncerDefaultPool": {
      "type": "int",
      "defaultValue": 200
    },
    "pgbouncerMaxClientConn": {
      "type": "int",
      "defaultValue": 2000
    },
    "pgbouncerAdminUser": {
      "type": "string",
      "defaultValue": "pgbouncer"
    },
    "pgbouncerAdminPass": {
      "type": "secureString",
      "defaultValue": "StrongPass123!"
    }
  },
  "variables": {
    "vnetName": "[format('{0}-vnet', parameters('prefix'))]",
    "subnetName": "db",
    "nsgName": "[format('{0}-nsg', parameters('prefix'))]",
    "natGatewayName": "[format('{0}-nat', parameters('prefix'))]",
    "publicIpName": "[format('{0}-nat-pip', parameters('prefix'))]",
    "ilbName": "[format('{0}-ilb', parameters('prefix'))]",
    "elbName": "[format('{0}-elb', parameters('prefix'))]",
    "pgbIlbName": "[format('{0}-pgb-ilb', parameters('prefix'))]",
    "bePoolName": "bepool",
    "pgbBePoolName": "pgb-bepool",
    "probeName": "patroniProbe",
    "pgbProbeName": "pgbProbe",
    "lbruleName": "pg",
    "pgbRuleName": "pgb",
    "vmNames": "[if(equals(parameters('numberOfNodes'), 2), createArray(format('{0}-1', parameters('prefix')), format('{0}-2', parameters('prefix'))), createArray(format('{0}-1', parameters('prefix')), format('{0}-2', parameters('prefix')), format('{0}-3', parameters('prefix'))))]",
    "vmIps": "[if(equals(parameters('numberOfNodes'), 2), createArray('10.50.1.4', '10.50.1.5'), createArray('10.50.1.4', '10.50.1.5', '10.50.1.6'))]",
    "vmZones": "[if(equals(parameters('numberOfNodes'), 2), createArray('1', '3'), createArray('1', '3', '1'))]",
    "pgbVmNames": [
      "[format('{0}-pgb-1', parameters('prefix'))]",
      "[format('{0}-pgb-2', parameters('prefix'))]"
    ],
    "pgbVmIps": [
      "10.50.1.7",
      "10.50.1.8"
    ],
    "pgbVmZones": [
      "1",
      "3"
    ],
    "cloudInitScript": "I2Nsb3VkLWNvbmZpZw0KDQpwYWNrYWdlczoNCiAgLSBqcQ0KICAtIGN1cmwNCiAgLSBnbnVwZw0KICAtIGxzYi1yZWxlYXNlDQogIC0gcHl0aG9uMy1waXANCiAgLSBoYXByb3h5DQogIC0gZXRjZA0KDQpydW5jbWQ6DQogIC0gY3VybCAtZnNTTCBodHRwczovL3d3dy5wb3N0Z3Jlc3FsLm9yZy9tZWRpYS9rZXlzL0FDQ0M0Q0Y4LmFzYyB8IGdwZyAtLWRlYXJtb3IgLW8gL3Vzci9zaGFyZS9rZXlyaW5ncy9wZy5ncGcNCiAgLSBlY2hvICJkZWIgW3NpZ25lZC1ieT0vdXNyL3NoYXJlL2tleXJpbmdzL3BnLmdwZ10gaHR0cDovL2FwdC5wb3N0Z3Jlc3FsLm9yZy9wdWIvcmVwb3MvYXB0ICQobHNiX3JlbGVhc2UgLWNzKS1wZ2RnIG1haW4iID4gL2V0Yy9hcHQvc291cmNlcy5saXN0LmQvcGcubGlzdA0KICAtIGFwdC1nZXQgdXBkYXRlDQogIC0gYXB0LWdldCBpbnN0YWxsIC15IHBvc3RncmVzcWwtMTYgcHl0aG9uMy1wc3ljb3BnMg0KICAtIHN5c3RlbWN0bCBzdG9wIHBvc3RncmVzcWwNCiAgLSBzeXN0ZW1jdGwgZGlzYWJsZSBwb3N0Z3Jlc3FsDQogIC0gc3lzY3RsIC13IHZtLnN3YXBwaW5lc3M9MQ0KICAtIHN5c2N0bCAtdyB2bS5tYXhfbWFwX2NvdW50PTI2MjE0NA0KICAtIHwNCiAgICBESVNLX0RBVEE9L2Rldi9kaXNrL2F6dXJlL3Njc2kxL2x1bjANCiAgICBpZiBbIC1iICIkRElTS19EQVRBIiBdOyB0aGVuDQogICAgICBwYXJ0ZWQgLXMgJHtESVNLX0RBVEF9IG1rbGFiZWwgZ3B0IG1rcGFydCBwcmltYXJ5IGV4dDQgMU1pQiAxMDAlDQogICAgICBzbGVlcCAzDQogICAgICBta2ZzLmV4dDQgLUYgJHtESVNLX0RBVEF9MQ0KICAgICAgbWtkaXIgLXAgL3BnZGF0YQ0KICAgICAgZWNobyAiJHtESVNLX0RBVEF9MSAvcGdkYXRhIGV4dDQgZGVmYXVsdHMsbm9hdGltZSAwIDIiID4+IC9ldGMvZnN0YWINCiAgICAgIG1vdW50IC1hDQogICAgICBjaG93biAtUiBwb3N0Z3Jlczpwb3N0Z3JlcyAvcGdkYXRhDQogICAgZmkNCiAgLSB8DQogICAgRElTS19XQUw9L2Rldi9kaXNrL2F6dXJlL3Njc2kxL2x1bjENCiAgICBpZiBbIC1iICIkRElTS19XQUwiIF07IHRoZW4NCiAgICAgIHBhcnRlZCAtcyAke0RJU0tfV0FMfSBta2xhYmVsIGdwdCBta3BhcnQgcHJpbWFyeSBleHQ0IDFNaUIgMTAwJQ0KICAgICAgc2xlZXAgMw0KICAgICAgbWtmcy5leHQ0IC1GICR7RElTS19XQUx9MQ0KICAgICAgbWtkaXIgLXAgL3Bnd2FsDQogICAgICBlY2hvICIiJHtESVNLX1dBTH0xIC9wZ3dhbCBleHQ0IGRlZmF1bHRzLG5vYXRpbWUgMCAyIiA+PiAvZXRjL2ZzdGFiDQogICAgICBtb3VudCAtYQ0KICAgICAgY2hvd24gLVIgcG9zdGdyZXM6cG9zdGdyZXMgL3Bnd2FsDQogICAgZmkNCiAgLSB8DQogICAgSE9TVE5BTUU9JChob3N0bmFtZSAtcykNCiAgICBJUD0kKGlwIC00IGFkZHIgc2hvdyBkZXYgZXRoMCB8IGF3ayAnL2luZXQgL3twcmludCAkMn0nIHwgY3V0IC1kLyAtZjEpDQogICAgY2F0ID4gL2V0Yy9kZWZhdWx0L2V0Y2QgPDxFVENERU9GDQogICAgRVRDRF9OQU1FPSIke0hPU1ROQU1FfSINCiAgICBFVENEX0lOSVRJQUxfQ0xVU1RFUj0icGdwYXRyb25pLTE9aHR0cDovLzEwLjUwLjEuNDoyMzgwLHBncGF0cm9uaS0yPWh0dHA6Ly8xMC41MC4xLjU6MjM4MCINCiAgICBFVENEX0lOSVRJQUxfQ0xVU1RFUl9TVEFURT0ibmV3Ig0KICAgIEVUQ0RfSU5JVElBTF9BRFZFUlRJU0VfUEVFUl9VUkxTPSJodHRwOi8vJHtJUH06MjM4MCINCiAgICBFVENEX0FEVkVSVElTRV9DTElFTlRfVVJMUz0iaHR0cDovLyR7SVB9OjIzNzkiDQogICAgRVRDRF9MSVNURU5fUEVFUl9VUkxTPSJodHRwOi8vJHtJUH06MjM4MCINCiAgICBFVENEX0xJU1RFTl9DTElFTlRfVVJMUz0iaHR0cDovLyR7SVB9OjIzNzkiDQogICAgRVRDREVPRg0KICAtIHN5c3RlbWN0bCBlbmFibGUgZXRjZA0KICAtIHN5c3RlbWN0bCByZXN0YXJ0IGV0Y2QNCiAgLSBzbGVlcCAxMA0KICAtIHBpcDMgaW5zdGFsbCBwYXRyb25pW2V0Y2RdIHJlcXVlc3RzDQogIC0gbWtkaXIgLXAgL2V0Yy9wYXRyb25pDQogIC0gfA0KICAgIEhPU1ROQU1FPSQoaG9zdG5hbWUgLXMpDQogICAgSVA9JChpcCAtNCBhZGRyIHNob3cgZGV2IGV0aDAgfCBhd2sgJy9pbmV0IC97cHJpbnQgJDJ9JyB8IGN1dCAtZC8gLWYxKQ0KICAgIGNhdCA+IC9ldGMvcGF0cm9uaS9wYXRyb25pLnltbCA8PFBBVFJPTKLFT0YNCiAgICBzY29wZTogcGctaGENCiAgICBuYW1lc3BhY2U6IC9zZXJ2aWNlLw0KICAgIG5hbWU6ICR7SE9TVE5BTUV9DQogICAgcmVzdGFwaToNCiAgICAgIGxpc3RlbjogMC4wLjAuMDo4MDA4DQogICAgICBjb25uZWN0X2FkZHJlc3M6ICR7SVB9OjgwMDgNCiAgICBldGNkOg0KICAgICAgaG9zdHM6IDEwLjUwLjEuNDoyMzc5LDEwLjUwLjEuNToyMzc5DQogICAgYm9vdHN0cmFwOg0KICAgICAgZGNzOg0KICAgICAgICB0dGw6IDIwDQogICAgICAgIGxvb3Bfd2FpdDogNQ0KICAgICAgICByZXRyeV90aW1lb3V0OiA1DQogICAgICAgIG1heGltdW1fbGFnX29uX2ZhaWxvdmVyOiAxMDQ4NTc2DQogICAgICAgIHN5bmNocm9ub3VzX21vZGU6IHRydWUNCiAgICAgICAgc3luY2hyb25vdXNfbW9kZV9zdHJpY3Q6IGZhbHNlDQogICAgICAgIHN5bmNocm9ub3VzX25vZGVfY291bnQ6IDENCiAgICAgICAgcG9zdGdyZXNxbDoNCiAgICAgICAgICBwYXJhbWV0ZXJzOg0KICAgICAgICAgICAgd2FsX2xldmVsOiBsb2dpY2FsDQogICAgICAgICAgICBtYXhfd2FsX3NlbmRlcnM6IDIwDQogICAgICAgICAgICBtYXhfcmVwbGljYXRpb25fc2xvdHM6IDIwDQogICAgICAgICAgICBzaGFyZWRfYnVmZmVyczogNEdCDQogICAgICAgICAgICBlZmZlY3RpdmVfY2FjaGVfc2l6ZTogOEdCDQogICAgICAgICAgICBtYWludGVuYW5jZV93b3JrX21lbTogMUdCDQogICAgICAgICAgICB3b3JrX21lbTogNjRNQg0KICAgICAgICAgICAgY2hlY2twb2ludF90aW1lb3V0OiAxMG1pbg0KICAgICAgICAgICAgc3luY2hyb25vdXNfY29tbWl0OiBvbg0KICAgICAgICAgIHVzZV9zbG90czogdHJ1ZQ0KICAgICAgICAgIHVzZV9wZ19yZXdpbmQ6IHRydWUNCiAgICAgIGluaXRkYjoNCiAgICAgICAgLSBlbmNvZGluZzogVVRGOA0KICAgICAgICAtIGRhdGEtY2hlY2tzdW1zDQogICAgICBwZ19oYmE6DQogICAgICAgIC0gaG9zdCByZXBsaWNhdGlvbiByZXBsaWNhdG9yIDEwLjUwLjAuMC8xNiBtZDUNCiAgICAgICAgLSBob3N0IGFsbCBhbGwgMTAuNTAuMC4wLzE2IG1kNQ0KICAgICAgdXNlcnM6DQogICAgICAgIHJlcGxpY2F0b3I6DQogICAgICAgICAgcGFzc3dvcmQ6IENoYW5nZU1lMTIzIQ0KICAgICAgICAgIG9wdGlvbnM6DQogICAgICAgICAgICAtIHJlcGxpY2F0aW9uDQogICAgcG9zdGdyZXNxbDoNCiAgICAgIGxpc3RlbjogMC4wLjAuMDo1NDMyDQogICAgICBjb25uZWN0X2FkZHJlc3M6ICR7SVB9OjU0MzINCiAgICAgIGRhdGFfZGlyOiAvcGdkYXRhDQogICAgICBiaW5fZGlyOiAvdXNyL2xpYi9wb3N0Z3Jlc3FsLzE2L2Jpbg0KICAgICAgcGFyYW1ldGVyczoge30NCiAgICAgIGF1dGhlbnRpY2F0aW9uOg0KICAgICAgICBzdXBlcnVzZXI6DQogICAgICAgICAgdXNlcm5hbWU6IHBvc3RncmVzDQogICAgICAgICAgcGFzc3dvcmQ6IENoYW5nZU1lMTIzIQ0KICAgICAgICByZXBsaWNhdGlvbjoNCiAgICAgICAgICB1c2VybmFtZTogcmVwbGljYXRvcg0KICAgICAgICAgIHBhc3N3b3JkOiBDaGFuZ2VNZTEyMyENCiAgICB0YWdzOg0KICAgICAgbm9mYWlsb3ZlcjogZmFsc2UNCiAgICAgIG5vbG9hZGJhbGFuY2U6IGZhbHNlDQogICAgICBjbG9uZWZyb206IGZhbHNlDQogICAgUEFUUk9OSUVPRg0KICAtIGNob3duIHBvc3RncmVzOnBvc3RncmVzIC9ldGMvcGF0cm9uaS9wYXRyb25pLnltbA0KICAtIHwNCiAgICBjYXQgPiAvZXRjL3N5c3RlbWQvc3lzdGVtL3BhdHJvbmkuc2VydmljZSA8PFNFSVZJQ0VFT0YNCiAgICBbVW5pdF0NCiAgICBEZXNjcmlwdGlvbj1QYXRYB25pIFBvc3RncmVTUUwgSEENCiAgICBBZnRlcj1uZXR3b3JrLnRhcmdldA0KDQogICAgW1NlcnZpY2VdDQogICAgVHlwZT1zaW1wbGUNCiAgICBVc2VyPXBvc3RncmVzDQogICAgR3JvdXA9cG9zdGdyZXMNCiAgICBFeGVjU3RhcnQ9L3Vzci9sb2NhbC9iaW4vcGF0cm9uaSAvZXRjL3BhdHJvbmkvcGF0cm9uaS55bWwNCiAgICBSZXN0YXJ0PW9uLWZhaWx1cmUNCiAgICBMaW1pdE5PRklMRT0xMDAwMDANCg0KICAgIFtJbnN0YWxsXQ0KICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0DQogICAgU0VSVklDRUVPRg0KICAtIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkDQogIC0gc3lzdGVtY3RsIGVuYWJsZSBwYXRyb25pDQogIC0gc3lzdGVtY3RsIHN0YXJ0IHBhdHJvbmkNCiAgLSB8DQogICAgY2F0ID4gL2V0Yy9oYXByb3h5L2hhcHJveHkuY2ZnIDw8SEFQUK9YWUVPRg0KICAgIGdsb2JhbA0KICAgICAgICBtYXhjb25uIDEwMDAwMA0KICAgIGRlZmF1bHRzDQogICAgICAgIG1vZGUgdGNwDQogICAgICAgIHRpbWVvdXQgY29ubmVjdCA1cw0KICAgICAgICB0aW1lb3V0IGNsaWVudCAgMjRoDQogICAgICAgIHRpbWVvdXQgc2VydmVyICAyNGgNCiAgICBmcm9udGVuZCBwZ19mZQ0KICAgICAgICBiaW5kICo6NTQzMg0KICAgICAgICBkZWZhdWx0X2JhY2tlbmQgcGdfYmUNCiAgICBiYWNrZW5kIHBnX2JlDQogICAgICAgIG9wdGlvbiB0Y3AtY2hlY2sNCiAgICAgICAgdGNwLWNoZWNrIGNvbm5lY3QgcG9ydCA1NDMyDQogICAgICAgIHNlcnZlciBwZzEgMTAuNTAuMS40OjU0MzIgY2hlY2sNCiAgICAgICAgc2VydmVyIHBnMiAxMC41MC4xLjU6NTQzMiBjaGVjayBiYWNrdXANCiAgICBIQVBST1hZRU9GDQogIC0gc3lzdGVtY3RsIGVuYWJsZSBoYXByb3h5DQogIC0gc3lzdGVtY3RsIHJlc3RhcnQgaGFwcm94eQ0KDQo=",
    "pgbCloudInitScript": "I2Nsb3VkLWNvbmZpZw0KDQpwYWNrYWdlczoNCiAgLSBwZ2JvdW5jZXINCiAgLSBwb3N0Z3Jlc3FsLWNsaWVudA0KDQpydW5jbWQ6DQogIC0gfA0KICAgIGNhdCA+IC9ldGMvcGdib3VuY2VyL3BnYm91bmNlci5pbmkgPDxQR0JFT0YNCiAgICBbZGF0YWJhc2VzXQ0KICAgIHBvc3RncmVzID0gaG9zdD0xMC41MC4xLjEwIHBvcnQ9NTQzMiBkYm5hbWU9cG9zdGdyZXMNCiAgICAqID0gaG9zdD0xMC41MC4xLjEwIHBvcnQ9NTQzMg0KICAgIFtwZ2JvdW5jZXJdDQogICAgbGlzdGVuX2FkZHIgPSAwLjAuMC4wDQogICAgbGlzdGVuX3BvcnQgPSA2NDMyDQogICAgcG9vbF9tb2RlID0gdHJhbnNhY3Rpb24NCiAgICBkZWZhdWx0X3Bvb2xfc2l6ZSA9IDIwMA0KICAgIG1heF9jbGllbnRfY29ubiA9IDIwMDANCiAgICBpZ25vcmVfc3RhcnR1cF9wYXJhbWV0ZXJzID0gZXh0cmFfZmxvYXRfZGlnaXRzDQogICAgc2VydmVyX3Rsc19zc2xtb2RlID0gcHJlZmVyDQogICAgYXV0aF90eXBlID0gbWQ1DQogICAgYXV0aF9maWxlID0gL2V0Yy9wZ2JvdW5jZXIvdXNlcmxpc3QudHh0DQogICAgYWRtaW5fdXNlcnMgPSBwZ2JvdW5jZXINCiAgICBQR0JFT0YNCiAgLSB8DQogICAgY2F0ID4gL2V0Yy9wZ2JvdW5jZXIvdXNlcmxpc3QudHh0IDw8VVNFUkVPRg0KICAgICJwZ2JvdW5jZXIiICJTdHJvbmdQYXNzMTIzISINCiAgICBVU0VSRU9GDQogIC0gY2hvd24gcGdib3VuY2VyOnBnYm91bmNlciAvZXRjL3BnYm91bmNlci91c2VybGlzdC50eHQNCiAgLSBjaG1vZCA2NDAgL2V0Yy9wZ2JvdW5jZXIvdXNlcmxpc3QudHh0DQogIC0gc3lzdGVtY3RsIGVuYWJsZSBwZ2JvdW5jZXINCiAgLSBzeXN0ZW1jdGwgcmVzdGFydCBwZ2JvdW5jZXINCg0K"
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-11-01",
      "name": "[variables('publicIpName')]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4"
      }
    },
    {
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "2023-11-01",
      "name": "[variables('natGatewayName')]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIpAddresses": [
          {
            "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
          }
        ],
        "idleTimeoutInMinutes": 4
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-11-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('region')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/natGateways', variables('natGatewayName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-11-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('region')]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "protocol": "Tcp",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "postgres",
            "properties": {
              "priority": 110,
              "access": "Allow",
              "protocol": "Tcp",
              "direction": "Inbound",
              "sourceAddressPrefix": "10.50.0.0/16",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "5432"
            }
          },
          {
            "name": "pgbouncer",
            "properties": {
              "priority": 115,
              "access": "Allow",
              "protocol": "Tcp",
              "direction": "Inbound",
              "sourceAddressPrefix": "10.50.0.0/16",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "6432"
            }
          },
          {
            "name": "patroni",
            "properties": {
              "priority": 120,
              "access": "Allow",
              "protocol": "Tcp",
              "direction": "Inbound",
              "sourceAddressPrefix": "10.50.0.0/16",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "8008"
            }
          },
          {
            "name": "etcd",
            "properties": {
              "priority": 130,
              "access": "Allow",
              "protocol": "Tcp",
              "direction": "Inbound",
              "sourceAddressPrefix": "10.50.0.0/16",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "2379-2380"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2023-11-01",
      "name": "[variables('ilbName')]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "fe",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('lbPrivateIP')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "probes": [
          {
            "name": "[variables('probeName')]",
            "properties": {
              "protocol": "Http",
              "port": 8008,
              "requestPath": "/primary",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('lbruleName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('ilbName'), 'fe')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 5432,
              "backendPort": 5432,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 30,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'), variables('probeName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-elb-pip', parameters('prefix'))]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "condition": "[parameters('enablePublicLB')]"
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2023-11-01",
      "name": "[variables('elbName')]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "condition": "[parameters('enablePublicLB')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "fe",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-elb-pip', parameters('prefix')))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "probes": [
          {
            "name": "[variables('probeName')]",
            "properties": {
              "protocol": "Http",
              "port": 8008,
              "requestPath": "/primary",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('lbruleName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), 'fe')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('bePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 5432,
              "backendPort": 5432,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 30,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'), variables('probeName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2023-11-01",
      "name": "[variables('pgbIlbName')]",
      "location": "[parameters('region')]",
      "sku": {
        "name": "Standard"
      },
      "condition": "[parameters('enablePgBouncerTier')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "fe",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[parameters('pgbouncerLbPrivateIP')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('pgbBePoolName')]"
          }
        ],
        "probes": [
          {
            "name": "[variables('pgbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 6432,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('pgbRuleName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('pgbIlbName'), 'fe')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('pgbIlbName'), variables('pgbBePoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 6432,
              "backendPort": 6432,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 30,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('pgbIlbName'), variables('pgbProbeName'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-nic', variables('vmNames')[copyIndex()])]",
      "location": "[parameters('region')]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('vmIps')[copyIndex()]]",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('bePoolName'))]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-11-01",
      "name": "[format('{0}-nic', variables('pgbVmNames')[copyIndex()])]",
      "location": "[parameters('region')]",
      "condition": "[parameters('enablePgBouncerTier')]",
      "copy": {
        "name": "pgbNicLoop",
        "count": 2
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              },
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('pgbVmIps')[copyIndex()]]",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('pgbIlbName'), variables('pgbBePoolName'))]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('pgbIlbName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2024-03-01",
      "name": "[variables('vmNames')[copyIndex()]]",
      "location": "[parameters('region')]",
      "zones": [
        "[variables('vmZones')[copyIndex()]]"
      ],
      "copy": {
        "name": "vmLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false
          },
          "customData": "[variables('cloudInitScript')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "0001-com-ubuntu-server-jammy",
            "sku": "22_04-lts",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          },
          "dataDisks": [
            {
              "lun": 0,
              "createOption": "Empty",
              "diskSizeGB": "[parameters('dataDiskSizeGB')]",
              "managedDisk": {
                "storageAccountType": "[parameters('diskSku')]"
              }
            },
            {
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": "[parameters('walDiskSizeGB')]",
              "managedDisk": {
                "storageAccountType": "[parameters('diskSku')]"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmNames')[copyIndex()]))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('vmNames')[copyIndex()]))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2024-03-01",
      "name": "[variables('pgbVmNames')[copyIndex()]]",
      "location": "[parameters('region')]",
      "zones": [
        "[variables('pgbVmZones')[copyIndex()]]"
      ],
      "condition": "[parameters('enablePgBouncerTier')]",
      "copy": {
        "name": "pgbVmLoop",
        "count": 2
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v5"
        },
        "osProfile": {
          "computerName": "[variables('pgbVmNames')[copyIndex()]]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false
          },
          "customData": "[variables('pgbCloudInitScript')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "0001-com-ubuntu-server-jammy",
            "sku": "22_04-lts",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('pgbVmNames')[copyIndex()]))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-nic', variables('pgbVmNames')[copyIndex()]))]"
      ]
    }
  ],
  "outputs": {
    "dbIlbIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))).frontendIPConfigurations[0].properties.privateIPAddress]"
    },
    "elbIP": {
      "type": "string",
      "value": "[if(parameters('enablePublicLB'), reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-elb-pip', parameters('prefix')))).ipAddress, 'disabled')]"
    },
    "pgbIlbIP": {
      "type": "string",
      "value": "[if(parameters('enablePgBouncerTier'), reference(resourceId('Microsoft.Network/loadBalancers', variables('pgbIlbName'))).frontendIPConfigurations[0].properties.privateIPAddress, 'disabled')]"
    }
  }
}